name: Java CD with Maven

on:
  push:
    branches: [ "develop", "main" ]

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/github_rsa
          chmod 400 ~/.ssh/github_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Clean Remote Directory
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${REMOTE_DIR}/*"

      - name: Copy project files to Remote Server
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src

      - name: Deploy to Green Environment
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          GREEN_DIR: ${{ secrets.GREEN_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${GREEN_DIR}/*"
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile ${REMOTE_USER}@${REMOTE_HOST}:${GREEN_DIR}/Dockerfile
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${GREEN_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${GREEN_DIR}/src
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd ${GREEN_DIR} && docker build -t green_app . && docker run -d -p 8040:8080 green_app"

      - name: Update Nginx Config to Green
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "
            sudo sed -i 's/upstream backend {.*server .*:8041;/upstream backend { server 133.186.153.195:8040;/' /etc/nginx/sites-available/default &&
            sudo systemctl reload nginx
          "

      - name: Deploy to Blue Environment
        if: always()
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          BLUE_DIR: ${{ secrets.BLUE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${BLUE_DIR}/*"
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile ${REMOTE_USER}@${REMOTE_HOST}:${BLUE_DIR}/Dockerfile
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${BLUE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${BLUE_DIR}/src
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd ${BLUE_DIR} && docker build -t blue_app . && docker run -d -p 8041:8080 blue_app"

      - name: Update Nginx Config to Blue
        if: always()
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "
            sudo sed -i 's/upstream backend {.*server .*:8040;/upstream backend { server 133.186.153.195:8041;/' /etc/nginx/sites-available/default &&
            sudo systemctl reload nginx
          "

      - name: Send Deployment Status to Dooray
        if: success()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트1 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트1 서버의 배포가 성공적으로 완료되었습니다!",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "green",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }

      - name: Send Deployment Failure to Dooray
        if: failure()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_ACTOR: ${{ github.actor }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트1 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트1 서버의 배포가 실패했습니다...",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "red",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }
