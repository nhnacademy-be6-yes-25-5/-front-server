name: Java CD with Maven

on:
  push:
    branches: [ "develop", "main" ]

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/github_rsa
          chmod 400 ~/.ssh/github_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Clean Remote Directory
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${REMOTE_DIR}/*"

      - name: Copy project files to Remote Server
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile-8040 ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile-8040
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile-8041 ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile-8041
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no build_and_run.sh ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/build_and_run.sh
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src

      - name: Deploy JARs on Remote Server
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
          NAVER_ID: ${{ secrets.NAVER_ID }}
          NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
          NHN_IMAGE_APPKEY: ${{ secrets.NHN_IMAGE_APPKEY }}
          NHN_IMAGE_SECRET: ${{ secrets.NHN_IMAGE_SECRET }}
          EUREKA_SERVER_HOSTNAME: ${{ secrets.EUREKA_SERVER_HOSTNAME }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            cd ${REMOTE_DIR}
            docker build -f Dockerfile-8040 -t front1-app-8040 .
            docker build -f Dockerfile-8041 -t front1-app-8041 .
            
            docker stop front1-app-8040 || true
            docker rm front1-app-8040 || true
            
            docker run -d -p 8040:8040 --name front1-app-8040 \
            --network yes255-network \
            -e NAVER_ID=${NAVER_ID} \
            -e NAVER_SECRET=${NAVER_SECRET} \
            -e NHN_IMAGE_SECRET=${NHN_IMAGE_SECRET} \
            -e NHN_IMAGE_APPKEY=${NHN_IMAGE_APPKEY} \
            -e EUREKA_SERVER_HOSTNAME=${EUREKA_SERVER_HOSTNAME} \
            -e SMTP_HOST=${SMTP_HOST} \ 
            -e SMTP_PASSWORD=${lxcm tulr nnme uimf} \
            -e SMTP_PORT = ${587} \
            -e SMTP_USERNAME=${amuge0705@gmail.com}
          
            front1-app-8040
            
            sleep 30
            
            docker stop front1-app-8041 || true
            docker rm front1-app-8041 || true
            
            docker run -d -p 8041:8041 --name front1-app-8041 \
            --network yes255-network \
            -e NAVER_ID=${NAVER_ID} \
            -e NAVER_SECRET=${NAVER_SECRET} \
            -e NHN_IMAGE_SECRET=${NHN_IMAGE_SECRET} \
            -e NHN_IMAGE_APPKEY=${NHN_IMAGE_APPKEY} \
            -e EUREKA_SERVER_HOSTNAME=${EUREKA_SERVER_HOSTNAME} \
            front1-app-8041
          EOF

      - name: Send Deployment Status to Dooray
        if: success()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트1 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트1 서버의 배포가 성공적으로 완료되었습니다!",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "green",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }

      - name: Send Deployment Failure to Dooray
        if: failure()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_ACTOR: ${{ github.actor }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트1 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트1 서버의 배포가 실패했습니다...",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "red",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }
