name: Java CD with Maven

on:
  push:
    branches: ["develop", "main"]

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/github_rsa
          chmod 400 ~/.ssh/github_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Clean Remote Directory
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${REMOTE_DIR}/*"

      - name: Copy project files to Remote Server
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no src/main/resources/application-prod.yml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src/main/resources/application-prod.yml

      - name: Check Dockerfile on Remote Server
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls -la ${REMOTE_DIR}/Dockerfile"
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls -la ${REMOTE_DIR}/pom.xml"
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls -la ${REMOTE_DIR}/src"
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls -la ${REMOTE_DIR}/src/main/resources/application-prod.yml"

      - name: Set previous environment
        id: set-env
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "Running SSH command to get the default environment..."
          ENV=$(ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "grep 'default ' /etc/nginx/sites-available/default | awk '{print \$2}' | sed 's/;//'")
          echo "Environment value: ${ENV}"
          echo "previous-environment=${ENV}" >> $GITHUB_ENV
        shell: bash

      - name: Deploy JAR to Blue Environment
        if: env.previous-environment == 'green'
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            cd ${REMOTE_DIR}
            if [ ! -f Dockerfile ]; then
              echo "Dockerfile not found!"
              exit 1
            fi
            docker build --no-cache -t front1-app-blue .
            docker stop front1-app-blue || true
            docker rm front1-app-blue || true
            docker run -d -p 8040:8040 --name front1-app-blue front1-app-blue
          EOF

      - name: Deploy JAR to Green Environment
        if: env.previous-environment == 'blue'
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            cd ${REMOTE_DIR}
            if [ ! -f Dockerfile ]; then
              echo "Dockerfile not found!"
              exit 1
            fi
            docker build --no-cache -t front1-app-green .
            docker stop front1-app-green || true
            docker rm front1-app-green || true
            docker run -d -p 8041:8041 --name front1-app-green front1-app-green
          EOF

      - name: Switch Nginx to Green Environment
        if: env.previous-environment == 'blue'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            echo "Switching Nginx to Green environment"
            sudo sed -i 's/default blue;/default green;/g' /etc/nginx/sites-available/default
            sudo nginx -t && sudo systemctl reload nginx
          EOF
        shell: bash

      - name: Switch Nginx to Blue Environment
        if: env.previous-environment == 'green'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            echo "Switching Nginx to Blue environment"
            sudo sed -i 's/default green;/default blue;/g' /etc/nginx/sites-available/default
            sudo nginx -t && sudo systemctl reload nginx
          EOF
        shell: bash

      - name: Send Deployment Status to Dooray
        if: success()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트 서버의 배포가 성공적으로 완료되었습니다!",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "green",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }

      - name: Send Deployment Failure to Dooray
        if: failure()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_ACTOR: ${{ github.actor }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "프론트 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "프론트 서버의 배포가 실패했습니다...",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "red",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }
